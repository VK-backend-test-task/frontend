/* tslint:disable */
/* eslint-disable */
/**
 * Backend for Docker containers ping info service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { ContainerInfo } from "../models";
import { PingInfo } from "../models";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Получить информацию о контейнерах и их последнем пинге
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pingsAggregateGet: async (
      oldestFirst?: boolean,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/pings/aggregate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (oldestFirst !== undefined) {
        localVarQueryParameter["oldest_first"] = oldestFirst;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Получить информацию о пингах
     * @param {string} [containerIp] IP контейнера, для которого выдавать список пингов
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {boolean} [success] Возвращать только успешные или неудавшиеся записи
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pingsGet: async (
      containerIp?: string,
      oldestFirst?: boolean,
      success?: boolean,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/pings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (containerIp !== undefined) {
        localVarQueryParameter["container_ip"] = containerIp;
      }

      if (oldestFirst !== undefined) {
        localVarQueryParameter["oldest_first"] = oldestFirst;
      }

      if (success !== undefined) {
        localVarQueryParameter["success"] = success;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Загрузить информацию о пингах
     * @param {Array<PingInfo>} body Список результатов пинга
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pingsPut: async (
      body: Array<PingInfo>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling pingsPut.",
        );
      }
      const localVarPath = `/pings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Получить информацию о контейнерах и их последнем пинге
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsAggregateGet(
      oldestFirst?: boolean,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<ContainerInfo>>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).pingsAggregateGet(oldestFirst, limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Получить информацию о пингах
     * @param {string} [containerIp] IP контейнера, для которого выдавать список пингов
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {boolean} [success] Возвращать только успешные или неудавшиеся записи
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsGet(
      containerIp?: string,
      oldestFirst?: boolean,
      success?: boolean,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<PingInfo>>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).pingsGet(containerIp, oldestFirst, success, limit, offset, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Загрузить информацию о пингах
     * @param {Array<PingInfo>} body Список результатов пинга
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsPut(
      body: Array<PingInfo>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).pingsPut(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Получить информацию о контейнерах и их последнем пинге
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsAggregateGet(
      oldestFirst?: boolean,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<ContainerInfo>>> {
      return DefaultApiFp(configuration)
        .pingsAggregateGet(oldestFirst, limit, offset, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Получить информацию о пингах
     * @param {string} [containerIp] IP контейнера, для которого выдавать список пингов
     * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
     * @param {boolean} [success] Возвращать только успешные или неудавшиеся записи
     * @param {number} [limit] Максимальное количество выдаваемых результатов
     * @param {number} [offset] Количество результатов, которое необходимо пропустить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsGet(
      containerIp?: string,
      oldestFirst?: boolean,
      success?: boolean,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<PingInfo>>> {
      return DefaultApiFp(configuration)
        .pingsGet(containerIp, oldestFirst, success, limit, offset, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Загрузить информацию о пингах
     * @param {Array<PingInfo>} body Список результатов пинга
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pingsPut(
      body: Array<PingInfo>,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return DefaultApiFp(configuration)
        .pingsPut(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Получить информацию о контейнерах и их последнем пинге
   * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
   * @param {number} [limit] Максимальное количество выдаваемых результатов
   * @param {number} [offset] Количество результатов, которое необходимо пропустить
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public async pingsAggregateGet(
    oldestFirst?: boolean,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<ContainerInfo>>> {
    return DefaultApiFp(this.configuration)
      .pingsAggregateGet(oldestFirst, limit, offset, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Получить информацию о пингах
   * @param {string} [containerIp] IP контейнера, для которого выдавать список пингов
   * @param {boolean} [oldestFirst] Сортировать начиная со старых записей
   * @param {boolean} [success] Возвращать только успешные или неудавшиеся записи
   * @param {number} [limit] Максимальное количество выдаваемых результатов
   * @param {number} [offset] Количество результатов, которое необходимо пропустить
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public async pingsGet(
    containerIp?: string,
    oldestFirst?: boolean,
    success?: boolean,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<PingInfo>>> {
    return DefaultApiFp(this.configuration)
      .pingsGet(containerIp, oldestFirst, success, limit, offset, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Загрузить информацию о пингах
   * @param {Array<PingInfo>} body Список результатов пинга
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public async pingsPut(
    body: Array<PingInfo>,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return DefaultApiFp(this.configuration)
      .pingsPut(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
